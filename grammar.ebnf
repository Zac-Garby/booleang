(*
    grammar.ebnf

    this file contains the grammar of booleang. it's intentionally
    very simple -- all operators have the same precedence, semicolons
    are required, etc...
*)

bit = "0" | "1";
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0";

(* lowercase is the set of lowercase letters, including underscore *)
lowercase = ? lowercase unicode letters + _ ?;

(* uppercase is the set of uppercase letters, not including underscore *)
uppercase = ? uppercase unicode letters ?;

prefix op = "!" | "¬";
infix op = "&" | "|" | "^" | "∧" | "∨" | "⊻";

alpha = lowercase | uppercase;
alphanum = alpha | digit;
char = ? all printable characters ?;

ident = alpha, { alphanum };

string = ('"', { char }, '"') |
         ("'", { char }, "'");

number = [ "-" ], { digit }, [ ".", { digit } ];
duration = number, ("ns" | "ms" | "s" | "m" | "h");

(* helpers *)

idents = "(", { ident, "," }, ident, ")";

expr = ident | bit |
       ( "(", expr, ")" ) |
       ( prefix op, expr ) |
       ( expr, infix op, expr );
exprs = "(", { expr, "," }, expr, ")";

(* types of statements inside circuits: *)

macro = "%", ident, idents, ";";

call = ( ident, exprs, "->", ( ident | idents ), ";" ) |
       ( ident, exprs );

pipe = ( exprs, "->", idents, ";" ) |
       ( expr, "->", ident );

clock = "clock", duration, ["%", ident], "{", stmts, "}";

stmts = { macro | call | pipe | clock };

(* top-level productions *)

circuit = "circuit", ident, [ idents, "->", idents ], "{", stmts, "}";
include = "include", string;
program = ["name", ":", { ident }, ";"], { circuit | include };
